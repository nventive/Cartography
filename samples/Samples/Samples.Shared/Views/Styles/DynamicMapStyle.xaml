<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
					xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
					xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
					xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
					xmlns:win="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
					xmlns:dynamicmap="using:Cartography.DynamicMap"
					xmlns:maps="using:Windows.UI.Xaml.Controls.Maps"
					xmlns:xamarin="http://nventive.com/xamarin"
					xmlns:android="http://nventive.com/android"
					xmlns:ios="http://nventive.com/ios"
					mc:Ignorable="d android xamarin ios"
					d:DesignHeight="300"
					d:DesignWidth="400">

	<ResourceDictionary.MergedDictionaries>
		<ResourceDictionary Source=".\Application\Colors.xaml" />
	</ResourceDictionary.MergedDictionaries>

	<!-- Button style -->
	<Style x:Key="ActiveButtonMapIconCircularStyle"
		   TargetType="Button">
		<Setter Property="Background"
				Value="{StaticResource Color03Brush}" />
		<Setter Property="Foreground"
				Value="{StaticResource Color01Brush}" />
		<Setter Property="BorderThickness"
				Value="1" />
		<Setter Property="BorderBrush"
				Value="{StaticResource Color01Brush}" />
		<Setter Property="HorizontalContentAlignment"
				Value="Center" />
		<Setter Property="VerticalContentAlignment"
				Value="Center" />
		<Setter Property="Height"
				Value="46" />
		<Setter Property="Width"
				Value="46" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Button">
					<!-- Width, Height, CornerRadius and Elevation set here -->
					<!-- in order to correctly display the shadow arount it for iOS and Android -->
					<Grid x:Name="RootGrid"
						  Margin="2,0"
						  Width="{TemplateBinding Width}"
						  Height="40"
						  CornerRadius="20"
						  HorizontalAlignment="Center"
						  VerticalAlignment="Center"
						  Background="{TemplateBinding Background}"
						  BorderBrush="{TemplateBinding BorderBrush}"
						  BorderThickness="{TemplateBinding BorderThickness}">
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal" />
								<VisualState x:Name="PointerOver">
									<VisualState.Setters>
										<Setter Target="ContentPresenter.Opacity"
												Value="0.5" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="Pressed">
									<VisualState.Setters>
										<Setter Target="ContentPresenter.Opacity"
												Value="0.5" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="Disabled">
									<VisualState.Setters>
										<Setter Target="ContentPresenter.Opacity"
												Value="0.5" />
									</VisualState.Setters>
								</VisualState>
							</VisualStateGroup>
							<!-- +++ ActivityStates is the visual state group that allows changing the look while executing. -->
							<VisualStateGroup x:Name="ActivityStates">
								<VisualState x:Name="Idle" />
								<VisualState x:Name="Executing" />
							</VisualStateGroup>
							<!-- +++ ResultStates is the visual state group for changing the look after execution based on outcome. -->
							<VisualStateGroup x:Name="ResultStates">
								<VisualState x:Name="None" />
								<VisualState x:Name="Canceled" />
								<VisualState x:Name="Successful" />
								<VisualState x:Name="Unsuccessful" />
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>

						<ContentPresenter x:Name="ContentPresenter"
										  Content="{TemplateBinding Content}"
										  ContentTransitions="{TemplateBinding ContentTransitions}"
										  ContentTemplate="{TemplateBinding ContentTemplate}"
										  HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
										  VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
										  AutomationProperties.AccessibilityView="Raw" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="ToggleMapButtonStyle"
		   TargetType="Button">
		<Setter Property="MinHeight"
				Value="44" />
		<Setter Property="Padding"
				Value="12,8,16,8" />
		<Setter Property="Background"
				Value="{StaticResource Color03Brush}" />
		<Setter Property="Margin"
				Value="20,20,7,20" />
		<Setter Property="HorizontalAlignment"
				Value="Stretch" />
		<Setter Property="VerticalAlignment"
				Value="Top" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Button">
					<Grid x:Name="RootGrid"
						  Background="{TemplateBinding Background}"
						  BorderBrush="{TemplateBinding BorderBrush}"
						  BorderThickness="{TemplateBinding BorderThickness}"
						  CornerRadius="8">

						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal" />
								<VisualState x:Name="PointerOver" />
								<VisualState x:Name="Pressed">
									<VisualState.Setters>
										<Setter Target="RootGrid.BorderBrush"
												Value="{StaticResource Color02Brush}" />
										<Setter Target="ContentPresenter.Foreground"
												Value="{StaticResource Color02Brush}" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="Disabled" />
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>

						<ContentPresenter x:Name="ContentPresenter"
										  Content="{TemplateBinding Content}"
										  ContentTransitions="{TemplateBinding ContentTransitions}"
										  ContentTemplate="{TemplateBinding ContentTemplate}"
										  Padding="{TemplateBinding Padding}"
										  Foreground="{TemplateBinding Foreground}"
										  HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
										  VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
										  AutomationProperties.AccessibilityView="Raw" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- ListView style -->
	<Style x:Key="DefaultListViewStyle"
		   TargetType="ListView">
		<Setter Property="IsTabStop"
				Value="False" />
		<Setter Property="TabNavigation"
				Value="Once" />
		<Setter Property="IsSwipeEnabled"
				Value="True" />
		<Setter Property="Padding"
				Value="0" />
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility"
				Value="Disabled" />
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility"
				Value="Auto" />
		<Setter Property="ScrollViewer.HorizontalScrollMode"
				Value="Disabled" />
		<Setter Property="ScrollViewer.IsHorizontalRailEnabled"
				Value="False" />
		<Setter Property="ScrollViewer.VerticalScrollMode"
				Value="Enabled" />
		<Setter Property="ScrollViewer.IsVerticalRailEnabled"
				Value="False" />
		<Setter Property="ScrollViewer.IsDeferredScrollingEnabled"
				Value="False" />
		<Setter Property="ScrollViewer.BringIntoViewOnFocusChange"
				Value="True" />
		<Setter Property="ItemContainerTransitions">
			<Setter.Value>
				<TransitionCollection>
					<AddDeleteThemeTransition />
					<ContentThemeTransition />
					<ReorderThemeTransition />
					<EntranceThemeTransition IsStaggeringEnabled="False" />
				</TransitionCollection>
			</Setter.Value>
		</Setter>
		<Setter Property="ItemsPanel">
			<Setter.Value>
				<ItemsPanelTemplate>
					<ItemsStackPanel Orientation="Vertical" />
				</ItemsPanelTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ListView">
					<ScrollViewer x:Name="ScrollViewer"
								  xamarin:Style="{StaticResource ListViewBaseScrollViewerStyle}"
								  AutomationProperties.AccessibilityView="Raw"
								  BringIntoViewOnFocusChange="{TemplateBinding ScrollViewer.BringIntoViewOnFocusChange}"
								  HorizontalScrollMode="{TemplateBinding ScrollViewer.HorizontalScrollMode}"
								  win:HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
								  IsHorizontalRailEnabled="{TemplateBinding ScrollViewer.IsHorizontalRailEnabled}"
								  IsHorizontalScrollChainingEnabled="{TemplateBinding ScrollViewer.IsHorizontalScrollChainingEnabled}"
								  IsVerticalScrollChainingEnabled="{TemplateBinding ScrollViewer.IsVerticalScrollChainingEnabled}"
								  IsVerticalRailEnabled="{TemplateBinding ScrollViewer.IsVerticalRailEnabled}"
								  IsDeferredScrollingEnabled="{TemplateBinding ScrollViewer.IsDeferredScrollingEnabled}"
								  TabNavigation="{TemplateBinding TabNavigation}"
								  win:VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}"
								  VerticalScrollMode="{TemplateBinding ScrollViewer.VerticalScrollMode}"
								  ZoomMode="{TemplateBinding ScrollViewer.ZoomMode}">
						<ItemsPresenter FooterTransitions="{TemplateBinding FooterTransitions}"
										FooterTemplate="{TemplateBinding FooterTemplate}"
										Footer="{TemplateBinding Footer}"
										HeaderTemplate="{TemplateBinding HeaderTemplate}"
										Header="{TemplateBinding Header}"
										HeaderTransitions="{TemplateBinding HeaderTransitions}"
										Margin="{TemplateBinding Padding}" />
					</ScrollViewer>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style BasedOn="{StaticResource DefaultListViewStyle}"
		   TargetType="ListView" />

	<!-- ListViewItem style -->
	<Style x:Key="DefaultListViewItemStyle"
		   TargetType="ListViewItem">
		<Setter Property="HorizontalAlignment"
				Value="Stretch" />
		<Setter Property="VerticalContentAlignment"
				Value="Stretch" />
		<Setter Property="HorizontalContentAlignment"
				Value="Stretch" />
		<win:Setter Property="Padding"
					Value="0" />
		<win:Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ListViewItem">
					<ListViewItemPresenter SelectedForeground="{TemplateBinding Foreground}"
										   VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
										   ContentMargin="{TemplateBinding Padding}"
										   HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" />
				</ControlTemplate>
			</Setter.Value>
		</win:Setter>
		<xamarin:Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ListViewItem">
					<ContentPresenter Content="{TemplateBinding Content}"
									  ContentTemplate="{TemplateBinding ContentTemplate}"
									  ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
									  Margin="{TemplateBinding Padding}"
									  HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
									  VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
				</ControlTemplate>
			</Setter.Value>
		</xamarin:Setter>
	</Style>

	<Style BasedOn="{StaticResource DefaultListViewItemStyle}"
		   TargetType="ListViewItem" />

	<!-- DynamicMap style-->
	<DataTemplate x:Key="ErrorTemplate">
		<Border IsHitTestVisible="False"
				Background="{StaticResource Color05Brush}"
				Padding="12"
				Margin="12">
			<TextBlock Text="{Binding }"
					   Style="{StaticResource Typo10}"
					   TextWrapping="Wrap" />
		</Border>
	</DataTemplate>

	<win:Style TargetType="dynamicmap:MapControl">
		<Setter Property="VerticalAlignment"
				Value="Stretch" />
		<Setter Property="HorizontalAlignment"
				Value="Stretch" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="dynamicmap:MapControl">
					<Border>
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="ControlStates">
								<VisualState x:Name="Initializing" />
								<VisualState x:Name="Ready">
									<Storyboard>
										<DoubleAnimation To="1"
														 Storyboard.TargetProperty="(UIElement.Opacity)"
														 Storyboard.TargetName="PART_map" />
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Error">
									<Storyboard>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)"
																	   Storyboard.TargetName="PART_ErrorPresenter">
											<DiscreteObjectKeyFrame KeyTime="0"
																	Value="Visible" />
										</ObjectAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>

						<Grid>
							<maps:MapControl x:Name="PART_map" />

							<ContentPresenter x:Name="PART_ErrorPresenter"
											  Visibility="Collapsed"
											  ContentTemplate="{StaticResource ErrorTemplate}"
											  HorizontalAlignment="Center"
											  VerticalAlignment="Top" />
						</Grid>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</win:Style>

	<!-- PeekingFlipView style -->
    <Style x:Key="DefaultFlipViewItem"
		   TargetType="FlipViewItem">

        <Setter Property="Background"
				Value="Transparent" />
        <Setter Property="HorizontalContentAlignment"
				Value="Stretch" />
        <Setter Property="VerticalContentAlignment"
				Value="Stretch" />
        <Setter Property="TabNavigation"
				Value="Local" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="FlipViewItem">
                    <Border Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}">
                        <ContentPresenter Content="{TemplateBinding Content}"
										  ContentTransitions="{TemplateBinding ContentTransitions}"
										  ContentTemplate="{TemplateBinding ContentTemplate}"
										  Margin="{TemplateBinding Padding}"
										  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- TextBlock style -->
	<Style x:Key="Typo01"
		   TargetType="TextBlock">
		<Setter Property="FontSize"
				Value="16" />
		<Setter Property="Foreground"
				Value="{StaticResource Color01Brush}" />
		<Setter Property="LineHeight"
				Value="22" />
	</Style>

	<Style x:Key="Typo02"
		   TargetType="TextBlock">
		<Setter Property="FontSize"
				Value="16" />
		<Setter Property="Foreground"
				Value="{StaticResource Color01Brush}" />
		<Setter Property="FontWeight"
				Value="Bold" />
		<Setter Property="LineHeight"
				Value="22" />
	</Style>

	<Style x:Key="Typo03"
		   TargetType="TextBlock">
		<Setter Property="FontSize"
				Value="14" />
		<Setter Property="Foreground"
				Value="{StaticResource Color03Brush}" />
		<Setter Property="LineHeight"
				Value="22" />
	</Style>

	<Style x:Key="Typo04"
		   TargetType="TextBlock">
		<Setter Property="FontSize"
				Value="16" />
		<Setter Property="Foreground"
				Value="{StaticResource Color03Brush}" />
		<Setter Property="LineHeight"
				Value="22" />
		<Setter Property="FontWeight"
				Value="Bold" />
	</Style>
	
</ResourceDictionary>
